name: Deploy SAM Multi-Lambda

on:
  push:
    branches: [ "main" ]
    paths:
      - "src/functions/**"
      - "scripts/generate_template.py"
      - ".github/workflows/deploy.yml"

permissions:
  id-token: write   # for OIDC
  contents: read

env:
  AWS_REGION: us-east-1
  ARTIFACT_BUCKET: ayush-lambda-artifacts
  STACK_NAME: my-multi-lambda-stack-actions

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production   # set required reviewers on this environment for approvals

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print OIDC token claims
        run: |
          echo "${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" | cut -d '.' -f1 | base64 -d -i 2>/dev/null || true
          echo "${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" | cut -d '.' -f2 | base64 -d -i 2>/dev/null || true 

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::975049970782:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install tooling
        run: |
          pip install --upgrade pip
          pip install aws-sam-cli pyyaml cfn-lint

      - name: Generate template.yaml
        run: python scripts/generate_template.py

      - name: Validate (SAM + cfn-lint)
        run: |
          sam validate --template template.yaml
          cfn-lint template.yaml

      - name: Initial Drift Check
        id: initial-drift
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} >/dev/null 2>&1; then
            echo "‚úÖ Stack exists, checking for drift..."
            
            # Start drift detection
            DRIFT_ID=$(aws cloudformation detect-stack-drift \
              --stack-name ${{ env.STACK_NAME }} \
              --query 'StackDriftDetectionId' --output text)
            
            echo "Drift detection started with ID: $DRIFT_ID"
            
            # Poll for drift detection completion
            echo "‚è≥ Waiting for drift detection to complete..."
            while true; do
              STATUS=$(aws cloudformation describe-stack-drift-detection-status \
                --stack-drift-detection-id $DRIFT_ID \
                --query 'DetectionStatus' --output text)
              
              if [ "$STATUS" = "DETECTION_COMPLETE" ]; then
                echo "‚úÖ Drift detection completed"
                break
              elif [ "$STATUS" = "DETECTION_FAILED" ]; then
                echo "‚ùå Drift detection failed"
                exit 1
              else
                echo "‚è≥ Drift detection in progress (status: $STATUS)..."
                sleep 5
              fi
            done
            
            # Get drift status
            DRIFT_STATUS=$(aws cloudformation describe-stack-drift-detection-status \
              --stack-drift-detection-id $DRIFT_ID \
              --query 'StackDriftStatus' --output text)
            
            echo "Drift status: $DRIFT_STATUS"
            
            if [ "$DRIFT_STATUS" = "DRIFTED" ]; then
              echo "‚ùå Stack has drifted! Manual changes detected."
              
              # Get detailed drift information
              echo "üìã Drift Details:"
              aws cloudformation describe-stack-resource-drifts \
                --stack-name ${{ env.STACK_NAME }} \
                --query 'StackResourceDrifts[?StackResourceDriftStatus==`MODIFIED`].[LogicalResourceId,ResourceType,StackResourceDriftStatus]' \
                --output table
              
              echo "Please fix the drift in AWS console before deploying."
              exit 1
            else
              echo "‚úÖ No drift detected, proceeding with deployment"
            fi
            
            echo "stack_exists=true" >> $GITHUB_OUTPUT
          else
            echo "üì¶ Stack doesn't exist yet - this will be a first deployment"
            echo "‚úÖ Will create stack and then check for drift"
            echo "stack_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build (use Lambda-like container for deps)
        run: sam build --use-container

      - name: Package
        run: |
          sam package \
               --template-file .aws-sam/build/template.yaml \
               --s3-bucket ${{ env.ARTIFACT_BUCKET }} \
               --output-template-file packaged.yaml

      - name: Create Stack Infrastructure (First Deployment)
        if: steps.initial-drift.outputs.stack_exists == 'false'
        run: |
          echo "üöÄ Creating new stack infrastructure..."
          
          # Create changeset without executing it
          sam deploy \
               --template-file packaged.yaml \
               --stack-name ${{ env.STACK_NAME }} \
               --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
               --no-execute-changeset
          
          # Execute the changeset to create stack
          CHANGESET_NAME=$(aws cloudformation list-change-sets \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Summaries[0].ChangeSetName' --output text)
          
          echo "Executing changeset: $CHANGESET_NAME"
          aws cloudformation execute-change-set \
            --change-set-name $CHANGESET_NAME \
            --stack-name ${{ env.STACK_NAME }}
          
          # Wait for stack creation to complete
          echo "‚è≥ Waiting for stack creation to complete..."
          aws cloudformation wait stack-create-complete \
            --stack-name ${{ env.STACK_NAME }}
          
          echo "‚úÖ Stack infrastructure created successfully"

      - name: Post-Creation Drift Check (New Stacks Only)
        if: steps.initial-drift.outputs.stack_exists == 'false'
        run: |
          echo "üîç Running drift check after stack creation (before deployment)..."
          
          # Wait a moment for stack to stabilize
          sleep 10
          
          # Start drift detection
          DRIFT_ID=$(aws cloudformation detect-stack-drift \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'StackDriftDetectionId' --output text)
          
          echo "Drift detection started with ID: $DRIFT_ID"
          
          # Poll for drift detection completion
          echo "‚è≥ Waiting for drift detection to complete..."
          while true; do
            STATUS=$(aws cloudformation describe-stack-drift-detection-status \
              --stack-drift-detection-id $DRIFT_ID \
              --query 'DetectionStatus' --output text)
            
            if [ "$STATUS" = "DETECTION_COMPLETE" ]; then
              echo "‚úÖ Drift detection completed"
              break
            elif [ "$STATUS" = "DETECTION_FAILED" ]; then
              echo "‚ùå Drift detection failed"
              exit 1
            else
              echo "‚è≥ Drift detection in progress (status: $STATUS)..."
              sleep 5
            fi
          done
          
          # Get drift status
          DRIFT_STATUS=$(aws cloudformation describe-stack-drift-detection-status \
            --stack-drift-detection-id $DRIFT_ID \
            --query 'StackDriftStatus' --output text)
          
          echo "Post-creation drift status: $DRIFT_STATUS"
          
          if [ "$DRIFT_STATUS" = "DRIFTED" ]; then
            echo "‚ùå Stack has drifted after creation! Manual changes detected."
            
            # Get detailed drift information
            echo "üìã Drift Details:"
            aws cloudformation describe-stack-resource-drifts \
              --stack-name ${{ env.STACK_NAME }} \
              --query 'StackResourceDrifts[?StackResourceDriftStatus==`MODIFIED`].[LogicalResourceId,ResourceType,StackResourceDriftStatus]' \
              --output table
            
            echo "‚ö†Ô∏è  Someone made manual changes to the stack after creation!"
            echo "‚ùå Deployment blocked - fix drift before proceeding"
            exit 1
          else
            echo "‚úÖ No drift detected after stack creation"
            echo "‚úÖ Proceeding with code deployment..."
          fi

      - name: Deploy Code (Final Step)
        run: |
          if [ "${{ steps.initial-drift.outputs.stack_exists }}" == "true" ]; then
            echo "üîÑ Updating existing stack with new code..."
          else
            echo "üì¶ Deploying code to newly created stack..."
          fi
          
          sam deploy \
               --template-file packaged.yaml \
               --stack-name ${{ env.STACK_NAME }} \
               --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
               --no-fail-on-empty-changeset
          
          echo "‚úÖ Deployment completed successfully"
